function D(e){const n=new Uint8Array(e.length);for(let s=0;s<e.length;s++){const r=e[s]+32768;n[s]=r>>>8&255}return n}function h(e){return e+255&-256}const A={"C-1":856,"C#1":808,"D-1":762,"D#1":720,"E-1":678,"F-1":640,"F#1":604,"G-1":570,"G#1":538,"A-1":508,"A#1":480,"B-1":452,"C-2":428,"C#2":404,"D-2":381,"D#2":360,"E-2":339,"F-2":320,"F#2":302,"G-2":285,"G#2":269,"A-2":254,"A#2":240,"B-2":226,"C-3":214,"C#3":202,"D-3":190,"D#3":180,"E-3":170,"F-3":160,"F#3":151,"G-3":143,"G#3":135,"A-3":127,"A#3":120,"B-3":113,"C-4":107,"C#4":101,"D-4":95,"D#4":90,"E-4":85,"F-4":80,"F#4":76,"G-4":71,"G#4":67,"A-4":64,"A#4":60,"B-4":57,"C-5":54,"C#5":51,"D-5":48,"D#5":45,"E-5":43,"F-5":40,"F#5":38,"G-5":36,"G#5":34,"A-5":32,"A#5":30,"B-5":28,"C-6":27,"C#6":25,"D-6":24,"D#6":22,"E-6":21,"F-6":20,"F#6":19,"G-6":18,"G#6":17,"A-6":16,"A#6":15,"B-6":14,"C-7":13,"C#7":12,"D-7":11,"D#7":11,"E-7":10,"F-7":10,"F#7":9,"G-7":9,"G#7":8,"A-7":8,"A#7":7,"B-7":7,"C-8":6,"C#8":6,"D-8":5,"D#8":5,"E-8":5,"F-8":4,"F#8":4,"G-8":4,"G#8":3,"A-8":3,"A#8":3,"B-8":3};function U(e){const n=A[e];if(n===void 0)throw new Error(`'${e}' is not a valid ProTracker note`);return Math.floor(3546895/n)}function F(e){const n=[];let s=0;for(const t of e){n.push(s);const o=h(t.length);s+=o}const r=s,l=new Uint8Array(r);let a=0;for(let t=0;t<e.length;t++){const o=e[t],f=h(o.length);l.set(o,a),a+=f}return{output:l,starts:n}}function C(e){if(e.length===0)return{output:new Uint8Array(0),starts:[],slot:0};const n=e.map(t=>h(t.length)),s=Math.max(...n),r=[],l=[];for(let t=0;t<e.length;t++)r.push(t*s),l.push(e[t]);const a=new Uint8Array(e.length*s);for(let t=0;t<e.length;t++){const o=e[t],f=t*s;a.set(o,f)}return{output:a,starts:r,slot:s}}function p(e){const n=Math.max(0,e).toString(16).toUpperCase();return n.length<2?n.padStart(2,"0"):n}function y(e,n){const s=n.map(r=>p(r>>8)).join("_");return`${e}_${s}.8SVX`}function E(e,n){return`${e}_${p(n>>8)}.8SVX`}function G(e="1.0.0"){return{meta:{name:"zoh",version:e},resamplePCM16(s,r,l){if(r===l)return s.slice();const a=l/r,t=Math.round(s.length*a);if(t===0)return new Int16Array(0);const o=new Int16Array(t);let f=0,i=0;for(let c=0;c<t;c++)for(o[c]=s[i],f+=r;f>=l;)f-=l,i+1<s.length&&i++;return o}}}const B=G();function d(e){if(e.length===0)throw new Error("no segments to write");let n=0;n+=8,n+=28;const s="wav2amiga",r=s.length+1&-2;n+=8+r,n+=8;for(const o of e)n+=o.sampleData.length;const l=new ArrayBuffer(n+4),a=new DataView(l);let t=0;a.setUint32(t,1179603533,!1),a.setUint32(t+4,n-8,!1),a.setUint32(t+8,944985688,!1),t+=12,a.setUint32(t,1447576658,!1),a.setUint32(t+4,20,!1),a.setUint32(t+8,0,!1),a.setUint32(t+12,0,!1),a.setUint32(t+16,0,!1),a.setUint32(t+20,e[0].targetHz,!1),a.setUint16(t+24,1,!1),a.setUint16(t+26,0,!1),t+=28,a.setUint32(t,1312902469,!1),a.setUint32(t+4,r,!1);for(let o=0;o<s.length;o++)a.setUint8(t+8+o,s.charCodeAt(o));t+=8+r,a.setUint32(t,1112491097,!1),a.setUint32(t+4,n-8-28-(8+r)-8,!1),t+=8;for(const o of e){const f=o.sampleData;for(let i=0;i<f.length;i++)a.setUint8(t+i,f[i]);t+=f.length}return new Uint8Array(l)}function S(e,n,s,r){const l=U(r);let a;s===l?a=n:a=B.resamplePCM16(n,s,l);const t=D(a),o=h(t.length),f=new Uint8Array(o);f.set(t),f.fill(128,t.length);const i={};for(let c=0;c<t.length;c++)i[c.toString()]=t[c];return{sampleData:f,targetHz:l,metadata:{label:e.replace(/\.wav$/i,""),note:r,targetHz:l,lengthBytes:t.length,paddedLengthBytes:o,paddedLength:o,sampleData:i}}}self.onmessage=e=>{try{const{type:n,files:s,mode:r}=e.data;if(n!=="convert")throw new Error("unknown message type");if(s.length===0)throw new Error("no files provided");if(r==="single"&&s.length>1)throw new Error("single mode requires exactly 1 input file");const l=s.map(i=>S(i.name,i.pcm16,i.srcHz,i.note));let a,t,o;if(r==="single"){const i=l[0];a=d([i]),t=[{...i.metadata,startByte:0,startOffsetHex:"00"}],o=`${i.metadata.label}.8SVX`}else if(r==="stacked"){const i=l.map(m=>m.sampleData),{output:c,starts:g}=F(i);a=d([{sampleData:c,targetHz:l[0].targetHz}]),t=l.map((m,u)=>({...m.metadata,startByte:g[u],startOffsetHex:p(g[u]>>8)})),o=y(l[0].metadata.label,g)}else if(r==="stacked-equal"){const i=l.map(u=>u.sampleData),{output:c,starts:g,slot:m}=C(i);a=d([{sampleData:c,targetHz:l[0].targetHz}]),t=l.map((u,w)=>({...u.metadata,startByte:g[w],startOffsetHex:p(g[w]>>8)})),o=E(l[0].metadata.label,m)}else throw new Error(`unknown mode: ${r}`);const f={type:"result",output:a,report:{mode:r,outputFile:o,segments:t,resampler:{name:"zoh",version:"1.0.0"}},filename:o};self.postMessage(f,[a.buffer])}catch(n){const r={type:"error",message:n instanceof Error?n.message:String(n)};self.postMessage(r)}};
