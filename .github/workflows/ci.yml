name: ci
on: 
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - name: Environment dump
        run: |
          echo "OS: $(uname -a)"
          echo "Node: $(node --version)"
          echo "pnpm: $(pnpm --version)"
          echo "FFmpeg: $(which ffmpeg || echo 'not in PATH')"
      - run: pnpm -v
      - run: pnpm install --frozen-lockfile
      - run: node tools/check-toolchain.mjs
      - run: pnpm run build
      - run: pnpm run test:unit
      - run: pnpm run versions:print
        if: always()
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: versions-unit
          path: out/versions.json

  golden-byteequal:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: ubuntu
          - os: macos-latest
            label: macos
          - os: windows-latest
            label: windows
    runs-on: ${{ matrix.os }}
    name: golden-byteequal (${{ matrix.label }})
    steps:
      - name: Configure Git for Windows
        if: matrix.os == 'windows-latest'
        run: git config --global core.longpaths true
        shell: pwsh
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - name: Environment dump
        run: |
          echo "OS: $(uname -a || echo Windows)"
          echo "Node: $(node --version)"
          echo "pnpm: $(pnpm --version)"
          echo "FFmpeg: $(which ffmpeg || echo 'not in PATH')"
        shell: bash
      - run: node --version
      - run: pnpm -v
      - run: pnpm install --frozen-lockfile
      - run: node tools/check-toolchain.mjs
      - run: pnpm run build
      - run: pnpm run test:golden:byteequal
      - run: node tools/check-goldens.mjs --resampler zoh
      - name: FFmpeg structural sanity
        run: pnpm run test:cli:ffmpeg
        continue-on-error: true
      - name: Check file encodings (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: node tools/detect-text-binary.mjs
      - run: pnpm run versions:print
        if: always()
      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: golden-failure-${{ matrix.label }}
          path: |
            out/versions.json
            out/diff/**
            out/goldens/**

  contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
      - name: Run contract tests
        run: |
          cd packages/core && pnpm exec vitest run src/__tests__/contracts.test.ts
          cd ../../apps/cli && pnpm exec vitest run src/__tests__/contracts.test.ts

  docs-and-examples:
    runs-on: ubuntu-latest
    env:
      W2A_OUT_DIR: out
    steps:
      - uses: actions/checkout@v4
      - name: Verify web scripts are executable
        run: |
          test -x scripts/web-start.sh
          test -x scripts/web-stop.sh
          test -x scripts/web-status.sh
      - run: corepack enable
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - name: Environment dump
        run: |
          echo "OS: $(uname -a)"
          echo "Node: $(node --version)"
          echo "pnpm: $(pnpm --version)"
      - run: pnpm install --frozen-lockfile
      - run: node tools/check-toolchain.mjs
      - run: pnpm run build
      - name: Check required documentation files
        run: |
          echo "Checking required documentation files..."
          test -f PROJECT_RULES.md || (echo "Missing PROJECT_RULES.md" && exit 1)
          test -f .github/pull_request_template.md || (echo "Missing PR template" && exit 1)
          test -f .github/ISSUE_TEMPLATE/bug_report.md || (echo "Missing bug report template" && exit 1)
          test -f .github/ISSUE_TEMPLATE/feature_request.md || (echo "Missing feature request template" && exit 1)
          test -f SECURITY.md || (echo "Missing SECURITY.md" && exit 1)
          echo "✓ All required documentation files present"
      - name: Check CONTRIBUTING.md sections
        run: |
          echo "Checking CONTRIBUTING.md required sections..."
          grep -q "Tiny Invariants Header" CONTRIBUTING.md || (echo "Missing Tiny Invariants Header section" && exit 1)
          grep -q "Request Micro-Structure" CONTRIBUTING.md || (echo "Missing Request Micro-Structure section" && exit 1)
          grep -q "Requirements Contract Template" CONTRIBUTING.md || (echo "Missing Requirements Contract Template section" && exit 1)
          grep -q "Running Examples" CONTRIBUTING.md || (echo "Missing Running Examples section" && exit 1)
          echo "✓ All required CONTRIBUTING.md sections present"
      - name: Run npm publish dry-run
        run: |
          echo "Running npm publish dry-run..."
          pnpm run publish:dry-run
          echo "✓ Publish dry-run completed"
      - name: Upload publish dry-run artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publish-dryrun
          path: out/publish-dryruns/**
      - name: Verify /docs assets exist
        run: |
          test -f docs/index.html
          test -f docs/app/index.html
          grep -q 'href="\./app/' docs/index.html
          test -f docs/.nojekyll
      - name: Summarize OUT_DIR contents
        if: always()
        run: |
          echo "OUT_DIR=$W2A_OUT_DIR"
          mkdir -p "$W2A_OUT_DIR"
          find "$W2A_OUT_DIR" -maxdepth 2 -type f -print || true
      - name: Upload diagnostic artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics
          path: |
            ${{ env.W2A_OUT_DIR }}/versions.json
            ${{ env.W2A_OUT_DIR }}/diff/**
            ${{ env.W2A_OUT_DIR }}/pkg/**
          if-no-files-found: ignore

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [unit, golden-byteequal, docs-and-examples, contracts]
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: node tools/check-toolchain.mjs
      - run: pnpm run build
      - run: pnpm run test
      - name: Create CLI tarball
        run: |
          cd apps/cli
          npm pack
          mv wav2amiga-*.tgz ../../out/
      - name: Create web dist zip
        run: |
          cd apps/web
          zip -r ../../out/wav2amiga-web-$(echo $GITHUB_REF | sed 's/refs\/tags\///').zip dist/
      - name: Generate versions.json
        run: pnpm run versions:print
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## wav2amiga ${{ github.ref_name }}
            
            This release includes:
            
            - **ZOH Resampler**: Zero-order hold resampler for deterministic, high-quality audio conversion
            - **Three Output Modes**: Single, stacked, and stacked-equal sample layouts
            - **CLI Tool**: Command-line interface with FFmpeg decode support
            - **Web Interface**: Browser-based converter with drag-and-drop support
            - **Website**: Live demo and documentation at [wav2amiga.github.io](https://wav2amiga.github.io)
            - **Byte-Equal Golden Tests**: CI-gated tests ensure deterministic outputs
            - **Examples**: Reproducible test cases with SHA256 verification
            - **API Stability**: Contract tests guard public API surface
            
            ### Installation
            
            ```bash
            npm install -g wav2amiga
            ```
            
            ### Usage
            
            ```bash
            # Convert single sample
            wav2amiga --mode single --note C-2 input.wav
            
            # Convert multiple samples
            wav2amiga --mode stacked --manifest manifest.json
            ```
            
            See [README.md](README.md) for complete documentation.
            
            ### Determinism
            
            This release provides byte-identical outputs across platforms through:
            - ZOH resampler (no interpolation)
            - Pure integer math
            - Node 20.x policy
            - CI-gated golden tests
            
            ### Files
            
            - `wav2amiga-${{ github.ref_name }}.tgz` - CLI package
            - `wav2amiga-web-${{ github.ref_name }}.zip` - Web interface
            - `versions.json` - Toolchain information
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          files: |
            out/wav2amiga-${{ github.ref_name }}.tgz
            out/wav2amiga-web-${{ github.ref_name }}.zip
            out/versions.json
            out/bench-baseline.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to NPM
        if: "!contains(github.ref_name, 'rc') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'alpha')"
        run: |
          cd apps/cli
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          npm publish --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # pages-deploy: Disabled - using /docs hosting instead
  # pages-deploy:
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: corepack enable
  #     - uses: actions/setup-node@v4.4.0
  #       with:
  #         node-version: '20.x'
  #         cache: 'pnpm'
  #     - run: pnpm install --frozen-lockfile
  #     - run: pnpm run build
  #     - name: Build web app
  #       run: |
  #         cd apps/web
  #         pnpm run build
  #     - name: Prepare website
  #       run: |
  #         # Create website/app directory
  #         mkdir -p website/app
  #         # Copy web app dist to website/app
  #         cp -r apps/web/dist/* website/app/
  #         # Ensure .nojekyll exists
  #         touch website/.nojekyll
  #     - name: Upload Pages artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: website
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
